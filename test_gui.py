#!/usr/bin/env python3
"""
Simple test for GUI components
"""

import sys
import os

def test_imports():
    """Test importing GUI components"""
    try:
        print("Testing basic imports...")
        import json
        import pathlib
        print("‚úì Standard library imports OK")
        
        print("Testing PySide6...")
        from PySide6.QtWidgets import QApplication, QMainWindow, QWidget
        from PySide6.QtCore import Qt, QThread, Signal
        print("‚úì PySide6 imports OK")
        
        print("Testing GUI modules...")
        from gui_main import ConfigManager
        print("‚úì ConfigManager import OK")
        
        from gui_channels import ChannelsTab
        print("‚úì ChannelsTab import OK")
        
        print("\nüéâ All imports successful!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

def test_config_manager():
    """Test ConfigManager functionality"""
    try:
        print("\nTesting ConfigManager...")
        from gui_main import ConfigManager
        
        config_manager = ConfigManager()
        print("‚úì ConfigManager created")
        
        # Test default settings
        settings = config_manager._default_settings()
        print(f"‚úì Default settings: {len(settings)} keys")
        
        # Test validation
        errors = config_manager.validate_settings(settings)
        print(f"‚úì Settings validation: {len(errors)} errors")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ConfigManager test failed: {e}")
        return False

def main():
    """Main test function"""
    print("üß™ AutoBot GUI Component Tests")
    print("=" * 40)
    
    if not test_imports():
        print("Import tests failed. Please install dependencies:")
        print("pip install PySide6")
        return False
    
    if not test_config_manager():
        print("ConfigManager tests failed.")
        return False
    
    print("\n‚úÖ All tests passed! GUI should work correctly.")
    
    # Try creating a minimal QApplication
    try:
        print("\nTesting QApplication creation...")
        from PySide6.QtWidgets import QApplication
        app = QApplication(sys.argv)
        print("‚úì QApplication created successfully")
        print("‚úì GUI system ready")
        return True
    except Exception as e:
        print(f"‚ùå QApplication test failed: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)